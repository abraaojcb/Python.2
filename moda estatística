{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Orientações:\n",
        "\n",
        "* Apenas as funções `range()` e `len()`, e o método `.append()`, podem ser usadas nas implementações;\n",
        "* Demais funções e bibliotecas do Python estão proibidas;\n",
        "* Execute as células com os casos de teste propostos para cada uma das funções desenvolvidas."
      ],
      "metadata": {
        "id": "V74KKlD3oLzf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np # esta biblioteca será usada apenas para os testes"
      ],
      "metadata": {
        "id": "MMqt-1W_oX_Q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Implementar um algoritmo que retorna a moda estatística de uma lista\n",
        "\n",
        "```python\n",
        ">>> lista = [1, 3, 2, 1, 5, 4]\n",
        ">>> moda = determina_moda(lista)\n",
        ">>> print(moda)\n",
        "1\n",
        "```\n",
        "\n",
        "**OBS.: não usar dicionários.**"
      ],
      "metadata": {
        "id": "2rdIy44NSwu-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def determina_moda(lista):\n",
        "    max_contagem = 0\n",
        "    moda = None\n",
        "\n",
        "    for num in lista:\n",
        "        contagem = lista.count(num)\n",
        "        if contagem > max_contagem:\n",
        "            max_contagem = contagem\n",
        "            moda = num\n",
        "\n",
        "    return moda\n",
        "\n",
        "    for num in lista:\n",
        "        contagem = lista.count(num)\n",
        "        if contagem > max_contagem:\n",
        "            max_contagem = contagem\n",
        "            moda = num\n",
        "\n",
        "    return modadef"
      ],
      "metadata": {
        "id": "T1Y9HrKtTJQe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "np.random.seed(0)\n",
        "lista_teste_1 = (np.random.rand(100) * 50).astype(int).tolist()\n",
        "lista_teste_2 = (np.random.randn(500) * 10).astype(int).tolist()\n",
        "lista_teste_3 = (np.abs(np.random.randn(800)) * 5).astype(int).tolist()\n",
        "\n",
        "moda1 = determina_moda(lista_teste_1)\n",
        "moda2 = determina_moda(lista_teste_2)\n",
        "moda3 = determina_moda(lista_teste_3)\n",
        "\n",
        "print(f'Moda 1 = {moda1}, {lista_teste_1.count(moda1)} ocorrências')\n",
        "print(f'Moda 2 = {moda2}, {lista_teste_2.count(moda2)} ocorrências')\n",
        "print(f'Moda 3 = {moda3}, {lista_teste_3.count(moda3)} ocorrências')"
      ],
      "metadata": {
        "id": "lqMS4qXFTNxs",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "436e59d1-14a5-4239-8ab9-3e73ce61b617"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Moda 1 = 30, 5 ocorrências\n",
            "Moda 2 = 0, 40 ocorrências\n",
            "Moda 3 = 1, 139 ocorrências\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Implementar os seguintes algoritmos de ordenação"
      ],
      "metadata": {
        "id": "ZxPlArs1ogmV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def insertion_sort(lista):\n",
        "    for i in range(1, len(lista)):\n",
        "        lista1 = lista[i]\n",
        "        j = i - 1\n",
        "        while j >= 0 and lista[j] > lista1:\n",
        "            lista[j + 1] = lista[j]\n",
        "            j -= 1\n",
        "        lista[j + 1] = lista1\n",
        "    return lista #Não precisa do Return"
      ],
      "metadata": {
        "id": "PR_sgi83oigK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def selection_sort(lista):\n",
        "    n = len(lista)\n",
        "    for i in range(n - 1):\n",
        "        menor = i\n",
        "        for j in range(i + 1, n):\n",
        "            if lista[j] < lista[menor]:\n",
        "                menor = j\n",
        "\n",
        "        lista[i], lista[menor] = lista[menor], lista[i]"
      ],
      "metadata": {
        "id": "nvuzrDKQoknU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def bubble_sort(lista):\n",
        "    n = len(lista)\n",
        "    for i in range(n):\n",
        "        for j in range(0, n - i - 1):\n",
        "            if lista[j] > lista[j + 1]:\n",
        "                lista[j], lista[j + 1] = lista[j + 1], lista[j]"
      ],
      "metadata": {
        "id": "mNqYSDE0omML"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def merge_sort(lista):\n",
        "    if len(lista) > 1:\n",
        "        meio = len(lista) // 2\n",
        "        inicio = []\n",
        "        final = []\n",
        "\n",
        "        for i in range(meio):\n",
        "            inicio.append(lista[i])\n",
        "        for i in range(meio, len(lista)):\n",
        "            final.append(lista[i])\n",
        "\n",
        "        merge_sort(inicio)\n",
        "        merge_sort(final)\n",
        "\n",
        "        i = j = k = 0\n",
        "        while i < len(inicio) and j < len(final):\n",
        "            if inicio[i] < final[j]:\n",
        "                lista[k] = inicio[i]\n",
        "                i += 1\n",
        "            else:\n",
        "                lista[k] = final[j]\n",
        "                j += 1\n",
        "            k += 1\n",
        "\n",
        "        while i < len(inicio):\n",
        "            lista[k] = inicio[i]\n",
        "            i += 1\n",
        "            k += 1\n",
        "\n",
        "        while j < len(final):\n",
        "            lista[k] = final[j]\n",
        "            j += 1\n",
        "            k += 1"
      ],
      "metadata": {
        "id": "rFcsMdvOonu7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def quick_sort(lista):\n",
        "    def particiona(inicio, fim):\n",
        "        pivo = lista[fim]\n",
        "        i = inicio - 1\n",
        "\n",
        "        for j in range(inicio, fim):\n",
        "            if lista[j] <= pivo:\n",
        "                i += 1\n",
        "                lista[i], lista[j] = lista[j], lista[i]\n",
        "\n",
        "        lista[i + 1], lista[fim] = lista[fim], lista[i + 1]\n",
        "        return i + 1\n",
        "\n",
        "    def quick_recursivo(inicio, fim):\n",
        "        if inicio < fim:\n",
        "            pivo_index = particiona(inicio, fim)\n",
        "            quick_recursivo(inicio, pivo_index - 1)\n",
        "            quick_recursivo(pivo_index + 1, fim)\n",
        "\n",
        "    quick_recursivo(0, len(lista) - 1)\n"
      ],
      "metadata": {
        "id": "oPmRvYaQopMb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def heapify(lista, n, i):\n",
        "    maior = i\n",
        "    esquerda = 2 * i + 1\n",
        "    direita = 2 * i + 2\n",
        "\n",
        "    if esquerda < n and lista[esquerda] > lista[maior]:\n",
        "        maior = esquerda\n",
        "\n",
        "    if direita < n and lista[direita] > lista[maior]:\n",
        "        maior = direita\n",
        "\n",
        "    if maior != i:\n",
        "        lista[i], lista[maior] = lista[maior], lista[i]\n",
        "        heapify(lista, n, maior)\n",
        "\n",
        "def heap_sort(lista):\n",
        "    n = len(lista)\n",
        "\n",
        "    for i in range(n // 2 - 1, -1, -1):\n",
        "        heapify(lista, n, i)\n",
        "\n",
        "    for i in range(n - 1, 0, -1):\n",
        "        lista[i], lista[0] = lista[0], lista[i]\n",
        "        heapify(lista, i, 0)"
      ],
      "metadata": {
        "id": "uFu9f3kdoqt7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def bucket_sort(lista):\n",
        "    if len(lista) == 0:\n",
        "        return lista\n",
        "\n",
        "    maior = lista[0]\n",
        "    menor = lista[0]\n",
        "\n",
        "    for num in lista:\n",
        "        if num > maior:\n",
        "            maior = num\n",
        "        if num < menor:\n",
        "            menor = num\n",
        "\n",
        "    tamanho = len(lista)\n",
        "    intervalo = (maior - menor) / tamanho\n",
        "    buckets = [[] for _ in range(tamanho)]\n",
        "\n",
        "    for num in lista:\n",
        "        indice = int((num - menor) / intervalo)\n",
        "        if indice == tamanho:\n",
        "            indice -= 1\n",
        "        buckets[indice].append(num)\n",
        "\n",
        "    def insertion_sort_bucket(bucket):\n",
        "        for i in range(1, len(bucket)):\n",
        "            chave = bucket[i]\n",
        "            j = i - 1\n",
        "            while j >= 0 and bucket[j] > chave:\n",
        "                bucket[j + 1] = bucket[j]\n",
        "                j -= 1\n",
        "            bucket[j + 1] = chave\n",
        "\n",
        "    lista_ordenada = []\n",
        "    for bucket in buckets:\n",
        "        insertion_sort_bucket(bucket)\n",
        "        lista_ordenada.extend(bucket)\n",
        "\n",
        "    for i in range(len(lista)):\n",
        "        lista[i] = lista_ordenada[i]"
      ],
      "metadata": {
        "id": "TBIcvQVkosdc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def counting_sort(lista):\n",
        "    if len(lista) == 0:\n",
        "        return lista\n",
        "\n",
        "    maior = lista[0]\n",
        "    menor = lista[0]\n",
        "\n",
        "    for num in lista:\n",
        "        if num > maior:\n",
        "            maior = num\n",
        "        if num < menor:\n",
        "            menor = num\n",
        "\n",
        "    lista_inteiros = True\n",
        "    for num in lista:\n",
        "        if num != int(num):\n",
        "            lista_inteiros = False\n",
        "            break\n",
        "\n",
        "    if not lista_inteiros:\n",
        "        return lista\n",
        "\n",
        "    tamanho_contagem = maior - menor + 1\n",
        "    contagem = [0] * tamanho_contagem\n",
        "\n",
        "    for num in lista:\n",
        "        contagem[num - menor] += 1\n",
        "\n",
        "    index = 0\n",
        "    for i in range(tamanho_contagem):\n",
        "        while contagem[i] > 0:\n",
        "            lista[index] = i + menor\n",
        "            index += 1\n",
        "            contagem[i] -= 1\n"
      ],
      "metadata": {
        "id": "H4c6Z8H6t4lL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def radix_inteiros(arr):\n",
        "    if len(arr) == 0:\n",
        "        return arr\n",
        "\n",
        "    fator = 10 ** 6\n",
        "    arr = [int(num * fator) for num in arr]\n",
        "\n",
        "    max_num = max(abs(num) for num in arr)\n",
        "    exp = 1\n",
        "\n",
        "    while max_num // exp > 0:\n",
        "        baldes = [[] for _ in range(10)]\n",
        "\n",
        "        for num in arr:\n",
        "            digito = (num // exp) % 10\n",
        "            baldes[digito].append(num)\n",
        "\n",
        "        arr = [num for balde in baldes for num in balde]\n",
        "        exp *= 10\n",
        "\n",
        "    return [num / fator for num in arr]\n",
        "\n",
        "def radix_sort(arr):\n",
        "    negativos = [num for num in arr if num < 0]\n",
        "    positivos = [num for num in arr if num >= 0]\n",
        "\n",
        "    negativos = radix_inteiros([-num for num in negativos])[::-1]\n",
        "    positivos = radix_inteiros(positivos)\n",
        "\n",
        "    arr[:] = [-num for num in negativos] + positivos"
      ],
      "metadata": {
        "id": "pycHDaWGt6zH"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Funções auxiliares:\n",
        "\n",
        "As funções `neg_para_pos()` e `float_para_int()` devem ajustar a lista de entrada para que seus valores possam ser usados com as funções `counting_sort()` e `radix_sort()`.\n",
        "\n",
        "Além de retornarem as listas transformadas, essas funções também devem retornar as variáveis e/ou estruturas de dados que fazem o mapeamento entre os dados originais e os dados transformados.\n",
        "\n",
        "As funções `pos_para_neg()` e `int_para_float()` aplicam o mapeamento na lista ordenada para obtermos os valores originais, porém ordenados.\n",
        "\n",
        "Segue um exemplo de como essas funções serão avaliadas:\n",
        "```python\n",
        ">>> lista = [.1, .3, .2, .5, .6, .4]\n",
        ">>> lista_int, mapeamento = float_para_int(lista)\n",
        ">>> counting_sort(lista_int)\n",
        ">>> lista_ordenada = int_para_float(lista_int, mapeamento)\n",
        ">>> print(lista_ordenada)\n",
        "[.1, .2, .3, .4, .5, .6]\n",
        "```"
      ],
      "metadata": {
        "id": "2l4axVANBcwq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def neg_para_pos(lista):\n",
        "    min_val = abs(min(lista)) if min(lista) < 0 else 0\n",
        "    mapeamento = {x: x + min_val for x in lista}  # Cria um mapeamento original -> convertido\n",
        "    lista_convertida = [mapeamento[x] for x in lista]\n",
        "    return lista_convertida, mapeamento"
      ],
      "metadata": {
        "id": "-Q-KFHfjBVv8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def pos_para_neg(lista, mapeamento):\n",
        "    mapeamento_inverso = {v: k for k, v in mapeamento.items()}  # Inverte o dicionário\n",
        "    return [mapeamento_inverso[x] for x in lista]"
      ],
      "metadata": {
        "id": "l9gnCCQKCSKi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def float_para_int(lista):\n",
        "    mapeamento = {}\n",
        "    lista_int = []\n",
        "    for num in lista:\n",
        "        valor_int = int(num * 1000)  # Converte float para inteiro\n",
        "        lista_int.append(valor_int)\n",
        "        mapeamento[valor_int] = num  # Salva a correspondência exata\n",
        "    return lista_int, mapeamento"
      ],
      "metadata": {
        "id": "AWIdNRrDBZL8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def int_para_float(lista, mapeamento):\n",
        "    return [mapeamento[i] for i in lista]"
      ],
      "metadata": {
        "id": "DbsgsRhkCWZJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def testa_ordenacao(lista):\n",
        "  \"\"\" Verificação da ordenação de uma lista:\n",
        "      Retorna True se a lista estiver ordenada\n",
        "      e False caso contrário. \"\"\"\n",
        "  n = len(lista)\n",
        "\n",
        "  for i in range(1, n):\n",
        "    if lista[i] < lista[i - 1]:\n",
        "      return False\n",
        "\n",
        "  return True"
      ],
      "metadata": {
        "id": "7Y-oV3bgowjL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1ª rodada de testes"
      ],
      "metadata": {
        "id": "2suNygPyt_-P"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# NÃO MODIFIQUE ESSA CÉLULA\n",
        "\n",
        "np.random.seed(0)\n",
        "Ns = [100, 205, 500, 1050, 6925]\n",
        "testes = [list((np.random.randint(0, 10*i) * np.random.rand(i)).astype(int)) for i in Ns]\n",
        "\n",
        "for teste_id, teste in enumerate(testes):\n",
        "  lista_teste_insertion = teste.copy()\n",
        "  lista_teste_selection = teste.copy()\n",
        "  lista_teste_bubble = teste.copy()\n",
        "  lista_teste_merge = teste.copy()\n",
        "  lista_teste_quick = teste.copy()\n",
        "  lista_teste_heap = teste.copy()\n",
        "  lista_teste_bucket = teste.copy()\n",
        "  lista_teste_counting = teste.copy()\n",
        "  lista_teste_radix = teste.copy()\n",
        "\n",
        "  insertion_sort(lista_teste_insertion)\n",
        "  selection_sort(lista_teste_selection)\n",
        "  bubble_sort(lista_teste_bubble)\n",
        "  merge_sort(lista_teste_merge)\n",
        "  quick_sort(lista_teste_quick)\n",
        "  heap_sort(lista_teste_heap)\n",
        "  bucket_sort(lista_teste_bucket)\n",
        "  counting_sort(lista_teste_counting)\n",
        "  radix_sort(lista_teste_radix)\n",
        "\n",
        "  print('Teste', teste_id + 1)\n",
        "  print(f'Função insertion_sort ordenou corretamente:', testa_ordenacao(lista_teste_insertion))\n",
        "  print(f'Função selection_sort ordenou corretamente:', testa_ordenacao(lista_teste_selection))\n",
        "  print(f'Função bubble_sort ordenou corretamente:', testa_ordenacao(lista_teste_bubble))\n",
        "  print(f'Função merge_sort ordenou corretamente:', testa_ordenacao(lista_teste_merge))\n",
        "  print(f'Função quick_sort ordenou corretamente:', testa_ordenacao(lista_teste_quick))\n",
        "  print(f'Função heap_sort ordenou corretamente:', testa_ordenacao(lista_teste_heap))\n",
        "  print(f'Função bucket_sort ordenou corretamente:', testa_ordenacao(lista_teste_bucket))\n",
        "  print(f'Função counting_sort ordenou corretamente:', testa_ordenacao(lista_teste_counting))\n",
        "  print(f'Função radix_sort ordenou corretamente:', testa_ordenacao(lista_teste_radix))\n",
        "  print()"
      ],
      "metadata": {
        "id": "p7nmGSdWow-8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "outputId": "fdae1ce5-abc7-4e4b-a2d4-1743de578cc4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'quick_sort' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-9-aaed6a35b311>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     20\u001b[0m   \u001b[0mbubble_sort\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlista_teste_bubble\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m   \u001b[0mmerge_sort\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlista_teste_merge\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m   \u001b[0mquick_sort\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlista_teste_quick\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m   \u001b[0mheap_sort\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlista_teste_heap\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m   \u001b[0mbucket_sort\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlista_teste_bucket\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'quick_sort' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2ª rodada de testes"
      ],
      "metadata": {
        "id": "tM0mXC2BuFHM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# NÃO MODIFIQUE ESSA CÉLULA\n",
        "\n",
        "np.random.seed(0)\n",
        "Ns = [100, 200, 500, 1000, 5000]\n",
        "testes = [list((np.random.randint(-10*i, 10*i) * np.random.rand(i)).astype(int)) for i in Ns]\n",
        "\n",
        "for teste_id, teste in enumerate(testes):\n",
        "  lista_teste_int, mapeamento = neg_para_pos(teste)\n",
        "\n",
        "  lista_teste_insertion = lista_teste_int.copy()\n",
        "  lista_teste_selection = lista_teste_int.copy()\n",
        "  lista_teste_bubble = lista_teste_int.copy()\n",
        "  lista_teste_merge = lista_teste_int.copy()\n",
        "  lista_teste_quick = lista_teste_int.copy()\n",
        "  lista_teste_heap = lista_teste_int.copy()\n",
        "  lista_teste_bucket = lista_teste_int.copy()\n",
        "  lista_teste_counting = lista_teste_int.copy()\n",
        "  lista_teste_radix = lista_teste_int.copy()\n",
        "\n",
        "  insertion_sort(lista_teste_insertion)\n",
        "  selection_sort(lista_teste_selection)\n",
        "  bubble_sort(lista_teste_bubble)\n",
        "  merge_sort(lista_teste_merge)\n",
        "  quick_sort(lista_teste_quick)\n",
        "  heap_sort(lista_teste_heap)\n",
        "  bucket_sort(lista_teste_bucket)\n",
        "  counting_sort(lista_teste_counting)\n",
        "  radix_sort(lista_teste_radix)\n",
        "\n",
        "  lista_teste_insertion_float = pos_para_neg(lista_teste_insertion, mapeamento)\n",
        "  lista_teste_selection_float = pos_para_neg(lista_teste_selection, mapeamento)\n",
        "  lista_teste_bubble_float = pos_para_neg(lista_teste_bubble, mapeamento)\n",
        "  lista_teste_merge_float = pos_para_neg(lista_teste_merge, mapeamento)\n",
        "  lista_teste_quick_float = pos_para_neg(lista_teste_quick, mapeamento)\n",
        "  lista_teste_heap_float = pos_para_neg(lista_teste_heap, mapeamento)\n",
        "  lista_teste_bucket_float = pos_para_neg(lista_teste_bucket, mapeamento)\n",
        "  lista_teste_counting_float = pos_para_neg(lista_teste_counting, mapeamento)\n",
        "  lista_teste_radix_float = pos_para_neg(lista_teste_radix, mapeamento)\n",
        "\n",
        "  print('Teste', teste_id + 1)\n",
        "  print(f'Função insertion_sort ordenou corretamente:', testa_ordenacao(lista_teste_insertion_float))\n",
        "  print(f'Função selection_sort ordenou corretamente:', testa_ordenacao(lista_teste_selection_float))\n",
        "  print(f'Função bubble_sort ordenou corretamente:', testa_ordenacao(lista_teste_bubble_float))\n",
        "  print(f'Função merge_sort ordenou corretamente:', testa_ordenacao(lista_teste_merge_float))\n",
        "  print(f'Função quick_sort ordenou corretamente:', testa_ordenacao(lista_teste_quick_float))\n",
        "  print(f'Função heap_sort ordenou corretamente:', testa_ordenacao(lista_teste_heap_float))\n",
        "  print(f'Função bucket_sort ordenou corretamente:', testa_ordenacao(lista_teste_bucket_float))\n",
        "  print(f'Função counting_sort ordenou corretamente:', testa_ordenacao(lista_teste_counting_float))\n",
        "  print(f'Função radix_sort ordenou corretamente:', testa_ordenacao(lista_teste_radix_float))\n",
        "  print()"
      ],
      "metadata": {
        "id": "xbGa7zz3uOld",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "766552fd-f54a-4c49-a790-075829f411ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Teste 1\n",
            "Função insertion_sort ordenou corretamente: True\n",
            "Função selection_sort ordenou corretamente: True\n",
            "Função bubble_sort ordenou corretamente: True\n",
            "Função merge_sort ordenou corretamente: True\n",
            "Função quick_sort ordenou corretamente: True\n",
            "Função heap_sort ordenou corretamente: True\n",
            "Função bucket_sort ordenou corretamente: True\n",
            "Função counting_sort ordenou corretamente: True\n",
            "Função radix_sort ordenou corretamente: True\n",
            "\n",
            "Teste 2\n",
            "Função insertion_sort ordenou corretamente: True\n",
            "Função selection_sort ordenou corretamente: True\n",
            "Função bubble_sort ordenou corretamente: True\n",
            "Função merge_sort ordenou corretamente: True\n",
            "Função quick_sort ordenou corretamente: True\n",
            "Função heap_sort ordenou corretamente: True\n",
            "Função bucket_sort ordenou corretamente: True\n",
            "Função counting_sort ordenou corretamente: True\n",
            "Função radix_sort ordenou corretamente: True\n",
            "\n",
            "Teste 3\n",
            "Função insertion_sort ordenou corretamente: True\n",
            "Função selection_sort ordenou corretamente: True\n",
            "Função bubble_sort ordenou corretamente: True\n",
            "Função merge_sort ordenou corretamente: True\n",
            "Função quick_sort ordenou corretamente: True\n",
            "Função heap_sort ordenou corretamente: True\n",
            "Função bucket_sort ordenou corretamente: True\n",
            "Função counting_sort ordenou corretamente: True\n",
            "Função radix_sort ordenou corretamente: True\n",
            "\n",
            "Teste 4\n",
            "Função insertion_sort ordenou corretamente: True\n",
            "Função selection_sort ordenou corretamente: True\n",
            "Função bubble_sort ordenou corretamente: True\n",
            "Função merge_sort ordenou corretamente: True\n",
            "Função quick_sort ordenou corretamente: True\n",
            "Função heap_sort ordenou corretamente: True\n",
            "Função bucket_sort ordenou corretamente: True\n",
            "Função counting_sort ordenou corretamente: True\n",
            "Função radix_sort ordenou corretamente: True\n",
            "\n",
            "Teste 5\n",
            "Função insertion_sort ordenou corretamente: True\n",
            "Função selection_sort ordenou corretamente: True\n",
            "Função bubble_sort ordenou corretamente: True\n",
            "Função merge_sort ordenou corretamente: True\n",
            "Função quick_sort ordenou corretamente: True\n",
            "Função heap_sort ordenou corretamente: True\n",
            "Função bucket_sort ordenou corretamente: True\n",
            "Função counting_sort ordenou corretamente: True\n",
            "Função radix_sort ordenou corretamente: True\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 3ª rodada de testes"
      ],
      "metadata": {
        "id": "1--_P5luuJTA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# NÃO MODIFIQUE ESSA CÉLULA\n",
        "\n",
        "np.random.seed(0)\n",
        "Ns = [100]\n",
        "testes = [list((1 + np.random.rand(i)) * (1 + np.random.rand(i))) for i in Ns]\n",
        "\n",
        "for teste_id, teste in enumerate(testes):\n",
        "  lista_teste_int, mapeamento = float_para_int(teste)\n",
        "\n",
        "  lista_teste_insertion = lista_teste_int.copy()\n",
        "  lista_teste_selection = lista_teste_int.copy()\n",
        "  lista_teste_bubble = lista_teste_int.copy()\n",
        "  lista_teste_merge = lista_teste_int.copy()\n",
        "  lista_teste_quick = lista_teste_int.copy()\n",
        "  lista_teste_heap = lista_teste_int.copy()\n",
        "  lista_teste_bucket = lista_teste_int.copy()\n",
        "  lista_teste_counting = lista_teste_int.copy()\n",
        "  lista_teste_radix = lista_teste_int.copy()\n",
        "\n",
        "  insertion_sort(lista_teste_insertion)\n",
        "  selection_sort(lista_teste_selection)\n",
        "  bubble_sort(lista_teste_bubble)\n",
        "  merge_sort(lista_teste_merge)\n",
        "  quick_sort(lista_teste_quick)\n",
        "  heap_sort(lista_teste_heap)\n",
        "  bucket_sort(lista_teste_bucket)\n",
        "  counting_sort(lista_teste_counting)\n",
        "  radix_sort(lista_teste_radix)\n",
        "\n",
        "  lista_teste_insertion_float = int_para_float(lista_teste_insertion, mapeamento)\n",
        "  lista_teste_selection_float = int_para_float(lista_teste_selection, mapeamento)\n",
        "  lista_teste_bubble_float = int_para_float(lista_teste_bubble, mapeamento)\n",
        "  lista_teste_merge_float = int_para_float(lista_teste_merge, mapeamento)\n",
        "  lista_teste_quick_float = int_para_float(lista_teste_quick, mapeamento)\n",
        "  lista_teste_heap_float = int_para_float(lista_teste_heap, mapeamento)\n",
        "  lista_teste_bucket_float = int_para_float(lista_teste_bucket, mapeamento)\n",
        "  lista_teste_counting_float = int_para_float(lista_teste_counting, mapeamento)\n",
        "  lista_teste_radix_float = int_para_float(lista_teste_radix, mapeamento)\n",
        "\n",
        "  print('Teste', teste_id + 1)\n",
        "  print(f'Função insertion_sort ordenou corretamente:', testa_ordenacao(lista_teste_insertion_float))\n",
        "  print(f'Função selection_sort ordenou corretamente:', testa_ordenacao(lista_teste_selection_float))\n",
        "  print(f'Função bubble_sort ordenou corretamente:', testa_ordenacao(lista_teste_bubble_float))\n",
        "  print(f'Função merge_sort ordenou corretamente:', testa_ordenacao(lista_teste_merge_float))\n",
        "  print(f'Função quick_sort ordenou corretamente:', testa_ordenacao(lista_teste_quick_float))\n",
        "  print(f'Função heap_sort ordenou corretamente:', testa_ordenacao(lista_teste_heap_float))\n",
        "  print(f'Função bucket_sort ordenou corretamente:', testa_ordenacao(lista_teste_bucket_float))\n",
        "  print(f'Função counting_sort ordenou corretamente:', testa_ordenacao(lista_teste_counting_float))\n",
        "  print(f'Função radix_sort ordenou corretamente:', testa_ordenacao(lista_teste_radix_float))\n",
        "  print()"
      ],
      "metadata": {
        "id": "XFDlQJDjo0jD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "28f5867e-4b69-4ccf-a88a-1d91f2fabe43"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Teste 1\n",
            "Função insertion_sort ordenou corretamente: True\n",
            "Função selection_sort ordenou corretamente: True\n",
            "Função bubble_sort ordenou corretamente: True\n",
            "Função merge_sort ordenou corretamente: True\n",
            "Função quick_sort ordenou corretamente: True\n",
            "Função heap_sort ordenou corretamente: True\n",
            "Função bucket_sort ordenou corretamente: True\n",
            "Função counting_sort ordenou corretamente: True\n",
            "Função radix_sort ordenou corretamente: True\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "bi5E3-3RE_Tp"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
